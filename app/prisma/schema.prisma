generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/comparativas_energia_mvp/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Comercializadora {
  id          String   @id @default(cuid())
  nombre      String   @unique
  activa      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  ofertas     Oferta[]
  
  @@map("comercializadoras")
}

model Oferta {
  id                String   @id @default(cuid())
  comercializadoraId String
  nombre            String
  tarifa            String
  tipo              String // "Fija", "Indexada", etc.
  precioEnergia     Float   // €/kWh
  precioTermino     Float   // €/kW mes
  descripcion       String?
  activa            Boolean @default(true)
  
  // Reglas de comisión
  comisionTipo      String  // "P" para potencia, "E" para energía
  comisionMinimo    Float   // Valor mínimo para aplicar comisión
  comisionMaximo    Float?  // Valor máximo (opcional)
  comisionValor     Float   // Valor de la comisión
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  comercializadora  Comercializadora @relation(fields: [comercializadoraId], references: [id], onDelete: Cascade)
  comparativaOfertas ComparativaOferta[]
  
  @@map("ofertas")
}

model Cliente {
  id              String   @id @default(cuid())
  razonSocial     String
  cif             String?
  direccion       String?
  localidad       String?
  provincia       String?
  codigoPostal    String?
  nombreFirmante  String?
  nifFirmante     String?
  telefono        String?
  email           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  comparativas Comparativa[]
  
  @@map("clientes")
}

model Comparativa {
  id                    String   @id @default(cuid())
  clienteId             String
  titulo                String?
  fechaOferta           DateTime @default(now())
  
  // PERIODO DE FACTURACIÓN
  fechaInicialFactura   DateTime?
  fechaFinalFactura     DateTime?
  diasPeriodoFactura    Int      @default(30)
  
  // ELECTRICIDAD
  contrataElectricidad      Boolean @default(true)
  multipuntoElectricidad    Boolean @default(false)
  tarifaAccesoElectricidad  String  // "2.0TD", "3.0TD", "6.1TD", "6.2TD"
  cupsElectricidad          String?
  consumoAnualElectricidad  Float   // kWh/año
  duracionContratoElectricidad Int  @default(12)
  comercializadoraActual    String
  ahorroMinimo              Float   @default(0.1)
  distribuidoraElectrica    String?
  
  // GAS
  contrataGas           Boolean @default(false)
  multipuntoGas         Boolean @default(false)
  tarifaAccesoGas       String?
  cupsGas               String?
  consumoAnualGas       Float?
  duracionContratoGas   Int?
  
  // CONFIGURACIÓN FEE
  feeEnergia            Float   @default(0.0)
  feeEnergiaMinimo      Float?
  feeEnergiaMaximo      Float?
  feePotencia           Float   @default(0.0)
  feePotenciaMinimo     Float?
  feePotenciaMaximo     Float?
  energiaFijo           Boolean @default(false)
  potenciaFijo          Boolean @default(false)
  
  // POTENCIAS CONTRATADAS por período (kW)
  potenciaP1            Float
  potenciaP2            Float?
  potenciaP3            Float?
  potenciaP4            Float?
  potenciaP5            Float?
  potenciaP6            Float?
  
  // CONSUMOS FACTURADOS por período (kWh)
  consumoP1             Float
  consumoP2             Float?
  consumoP3             Float?
  consumoP4             Float?
  consumoP5             Float?
  consumoP6             Float?
  
  // FACTURA ACTUAL - ELECTRICIDAD
  terminoFijoElectricidad     Float
  terminoVariableElectricidad Float
  excesoPotencia              Float   @default(0.0)
  impuestoElectricidad        Float
  ivaElectricidad            Float
  totalFacturaElectricidad   Float
  
  // FACTURA ACTUAL - GAS
  terminoFijoGas      Float?
  terminoVariableGas  Float?
  impuestoGas         Float?
  ivaGas              Float?
  totalFacturaGas     Float?
  
  // Metadatos
  notas               String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  cliente             Cliente @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  ofertas             ComparativaOferta[]
  
  @@map("comparativas")
}

model ComparativaOferta {
  id              String   @id @default(cuid())
  comparativaId   String
  ofertaId        String
  
  // Resultados calculados
  importeCalculado Float   // € calculado para esta oferta
  ahorroAnual     Float   // € ahorro vs factura actual
  comisionGanada  Float   // € comisión para el consultor
  
  createdAt       DateTime @default(now())
  
  comparativa     Comparativa @relation(fields: [comparativaId], references: [id], onDelete: Cascade)
  oferta          Oferta @relation(fields: [ofertaId], references: [id], onDelete: Cascade)
  
  @@unique([comparativaId, ofertaId])
  @@map("comparativa_ofertas")
}
