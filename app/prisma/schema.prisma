generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/comparativas_energia_mvp/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  accounts Account[]
  sessions Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Comercializadora {
  id          String   @id @default(cuid())
  nombre      String   @unique
  activa      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  ofertas     Oferta[]
  
  @@map("comercializadoras")
}

model Oferta {
  id                String   @id @default(cuid())
  comercializadoraId String
  nombre            String
  tarifa            String
  tipo              String // "Fija", "Indexada", etc.
  precioEnergia     Float   // €/kWh
  precioTermino     Float   // €/kW mes
  descripcion       String?
  activa            Boolean @default(true)
  
  // Reglas de comisión
  comisionTipo      String  // "P" para potencia, "E" para energía
  comisionMinimo    Float   // Valor mínimo para aplicar comisión
  comisionMaximo    Float?  // Valor máximo (opcional)
  comisionValor     Float   // Valor de la comisión
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  comercializadora  Comercializadora @relation(fields: [comercializadoraId], references: [id], onDelete: Cascade)
  comparativaOfertas ComparativaOferta[]
  
  @@map("ofertas")
}

model Cliente {
  id          String   @id @default(cuid())
  nombre      String
  cif         String?
  direccion   String?
  telefono    String?
  email       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  comparativas Comparativa[]
  
  @@map("clientes")
}

model Comparativa {
  id                String   @id @default(cuid())
  clienteId         String
  
  // Datos de entrada
  consumoAnual      Float    // kWh/año
  potenciaContratada Float   // kW
  tarifaActual      String
  importeActual     Float    // € factura actual mensual/anual
  
  // Metadatos
  titulo            String?
  notas             String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  cliente           Cliente @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  ofertas           ComparativaOferta[]
  
  @@map("comparativas")
}

model ComparativaOferta {
  id              String   @id @default(cuid())
  comparativaId   String
  ofertaId        String
  
  // Resultados calculados
  importeCalculado Float   // € calculado para esta oferta
  ahorroAnual     Float   // € ahorro vs factura actual
  comisionGanada  Float   // € comisión para el consultor
  
  createdAt       DateTime @default(now())
  
  comparativa     Comparativa @relation(fields: [comparativaId], references: [id], onDelete: Cascade)
  oferta          Oferta @relation(fields: [ofertaId], references: [id], onDelete: Cascade)
  
  @@unique([comparativaId, ofertaId])
  @@map("comparativa_ofertas")
}
