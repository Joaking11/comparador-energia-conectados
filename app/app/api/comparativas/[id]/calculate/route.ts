
import { NextResponse } from 'next/server';
import { CalculationEngine } from '@/lib/calculation-engine';

export const dynamic = 'force-dynamic';

export async function POST(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    console.log('üî¢ Iniciando rec√°lculo para comparativa:', params.id);

    // Validar que el ID existe
    if (!params.id) {
      console.log('‚ùå Error: ID de comparativa faltante');
      return NextResponse.json(
        { 
          error: 'ID de comparativa requerido',
          details: 'No se proporcion√≥ el ID de la comparativa'
        },
        { status: 400 }
      );
    }

    // Verificar que la comparativa existe en la BD
    const { prisma } = await import('@/lib/db');
    const comparativa = await prisma.comparativas.findUnique({
      where: { id: params.id }
    });

    if (!comparativa) {
      console.log('‚ùå Error: Comparativa no encontrada:', params.id);
      return NextResponse.json(
        { 
          error: 'Comparativa no encontrada',
          details: `No existe una comparativa con ID: ${params.id}`
        },
        { status: 404 }
      );
    }

    console.log('‚úÖ Comparativa encontrada:', {
      id: comparativa.id,
      titulo: comparativa.titulo,
      consumoAnual: comparativa.consumoAnualElectricidad,
      tarifa: comparativa.tarifaAccesoElectricidad
    });

    // Validar datos cr√≠ticos
    if (!comparativa.consumoAnualElectricidad || comparativa.consumoAnualElectricidad <= 0) {
      console.log('‚ùå Error: Consumo anual inv√°lido');
      return NextResponse.json(
        { 
          error: 'Datos de comparativa incompletos',
          details: 'El consumo anual de electricidad es requerido y debe ser mayor a 0'
        },
        { status: 400 }
      );
    }

    if (!comparativa.tarifaAccesoElectricidad) {
      console.log('‚ùå Error: Tarifa de acceso faltante');
      return NextResponse.json(
        { 
          error: 'Datos de comparativa incompletos',
          details: 'La tarifa de acceso el√©ctrico es requerida'
        },
        { status: 400 }
      );
    }

    // Leer par√°metros de personalizaci√≥n del body si est√°n disponibles
    const body = await request.json().catch(() => ({}));
    const parametrosPersonalizados = body.parametros;

    if (parametrosPersonalizados) {
      console.log('üìù Aplicando par√°metros personalizados:', parametrosPersonalizados);
    }

    // Ejecutar el motor de c√°lculo real con par√°metros personalizados
    console.log('‚öôÔ∏è Iniciando motor de c√°lculo...');
    const results = await CalculationEngine.calculateAndSave(params.id, parametrosPersonalizados);

    console.log(`‚úÖ Rec√°lculo completado: ${results.length} ofertas procesadas`);

    if (results.length === 0) {
      console.log('‚ö†Ô∏è Advertencia: No se encontraron ofertas aplicables');
      return NextResponse.json({
        success: true,
        message: 'C√°lculo completado, pero no se encontraron ofertas aplicables',
        resultados: 0,
        ofertas: [],
        warning: 'No hay tarifas que coincidan con los criterios de la comparativa'
      });
    }

    return NextResponse.json({ 
      success: true,
      message: `Rec√°lculo completado exitosamente`,
      resultados: results.length,
      ofertas: results
    });

  } catch (error) {
    console.error('‚ùå Error detallado en rec√°lculo:', {
      message: error instanceof Error ? error.message : 'Error desconocido',
      stack: error instanceof Error ? error.stack : undefined,
      comparativaId: params.id
    });
    
    // Errores espec√≠ficos de Prisma
    if (error instanceof Error && error.message.includes('prisma')) {
      return NextResponse.json(
        { 
          error: 'Error de base de datos',
          details: 'Problema conectando con la base de datos. Verifique la conexi√≥n.',
          technical: error.message
        },
        { status: 503 }
      );
    }

    // Errores de c√°lculo espec√≠ficos
    if (error instanceof Error && error.message.includes('calculateOffers')) {
      return NextResponse.json(
        { 
          error: 'Error en c√°lculo de ofertas',
          details: 'Problema procesando las tarifas disponibles',
          technical: error.message
        },
        { status: 422 }
      );
    }
    
    return NextResponse.json(
      { 
        error: 'Error procesando rec√°lculo',
        details: error instanceof Error ? error.message : 'Error interno del servidor',
        comparativaId: params.id
      },
      { status: 500 }
    );
  }
}
